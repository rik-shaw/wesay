<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)/../</SolutionDir>

		<!-- Enable the restore command to run before builds -->
		<RestorePackages Condition="  '$(RestorePackages)' == '' ">true</RestorePackages>

		<!-- Determines if package restore consent is required to restore packages -->
		<RequireRestoreConsent Condition=" '$(RequireRestoreConsent)' != 'false' ">false</RequireRestoreConsent>

		<!-- Download NuGet.exe if it does not already exist -->
		<DownloadNuGetExe Condition=" '$(DownloadNuGetExe)' == '' ">true</DownloadNuGetExe>
	</PropertyGroup>

	<ItemGroup Condition=" '$(PackageSources)' == '' ">
		<!-- Package sources used to restore packages. -->
		<!-- The official NuGet package source (https://nuget.org/api/v2/) will be excluded if package sources are specified and it does not appear in the list -->
		<!--PackageSource Include="https://nuget.org/api/v2/" /-->
		<!--PackageSource Include="http://build.palaso.org/guestAuth/app/nuget/v1/FeedService.svc/" /-->
	</ItemGroup>

	<Target Name="SetLinuxArch" Condition="'$(OS)'!='Windows_NT'">
		<Exec Command="/usr/bin/test `dpkg --print-architecture` = amd64" ContinueOnError="true" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="ZeroIfamd64"/>
		</Exec>
		<Exec Command="/usr/bin/test `dpkg --print-architecture` = i386" ContinueOnError="true" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="ZeroIfi386"/>
		</Exec>
		<PropertyGroup>
			<DpkgArch Condition="'$(ZeroIfamd64)'=='0'">amd64</DpkgArch>
			<DpkgArch Condition="'$(ZeroIfi386)'=='0'">i386</DpkgArch>
			<Architecture Condition="'$(DpkgArch)'=='amd64'">64</Architecture>
			<Architecture Condition="'$(DpkgArch)'=='i386'">32</Architecture>
			<PackagesConfigSource>$(NuGetToolsPath)packages-linux-$(DpkgArch).config</PackagesConfigSource>
			<GeckoDir>$(RootDir)/src/packages/Geckofx45.$(Architecture).Linux.45.0.37</GeckoDir>
		</PropertyGroup>
	</Target>

	<PropertyGroup>
		<NuGetToolsPath>$(MSBuildThisFileDirectory)</NuGetToolsPath>
		<PackagesConfigSource Condition="'$(OS)'=='Windows_NT'">$(NuGetToolsPath)packages-windows.config</PackagesConfigSource>
		<GeckoDir Condition="'$(OS)'=='Windows_NT'">$(RootDir)/src/packages/Geckofx45.45.0.34</GeckoDir><!--yes, this version is missing the terminal .0-->
		<PackagesConfig>$(ProjectDir)packages.config</PackagesConfig>

		<PackageSources Condition=" $(PackageSources) == '' ">@(PackageSource)</PackageSources>

		<!-- NuGet command -->
		<NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)/NuGet.exe</NuGetExePath>
		<NuGetCommand Condition="'$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
		<!--
		NuGet has trouble when Ubuntu 16.04 pbuilder sets the home directory to /nonexistent, and
		just setting -ConfigFile is not enough to make nuget not work with config files in the home directory.
		Setting XDG_CONFIG_HOME prevents nuget from working with config files the home directory.
		-->
		<NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">[ -d $HOME ] || export XDG_CONFIG_HOME=`mktemp -d`; "$(MONO_PREFIX)"/bin/mono --runtime="$(MONO_RUNTIME)" $(NuGetExePath)</NuGetCommand>

		<!-- Command to download packages -->
		<CoreRestoreCommand>$(NuGetCommand) restore "$(PackagesConfig)" -NonInteractive -PackagesDirectory "$(SolutionDir)/src/packages"</CoreRestoreCommand>
		<RestoreCommand Condition="'$(OS)' == 'Windows_NT'">$(CoreRestoreCommand)</RestoreCommand>
		<!-- 2017-03-17: Sometimes NuGet fails after downloading when running on a build node, such as with message "Object reference not set to an instance of an object". Try it more than once to reduce this random failure. Maybe upgrading NuGet will help actually fix the problem. -->
		<RestoreCommand Condition="'$(OS)' != 'Windows_NT'">$(CoreRestoreCommand) || (sleep 2m; $(CoreRestoreCommand)) || (sleep 2m; $(CoreRestoreCommand))</RestoreCommand>
	</PropertyGroup>

	<Target Name="RestorePlatformDependentPackages" DependsOnTargets="SetLinuxArch;CheckPrerequisites">
		<Message Condition="'$(OS)' != 'Windows_NT'" Text="DpkgArch: $(DpkgArch)" Importance="high"/>
		<Copy SourceFiles="$(PackagesConfigSource)" DestinationFiles="$(PackagesConfig)"/>
		<Exec Command="$(RestoreCommand)"/>
	</Target>

	<PropertyGroup>
		<NuGetUrl Condition="'$(OS)' == 'Windows_NT'">https://nuget.org/NuGet.exe</NuGetUrl>
		<NuGetUrl Condition="'$(OS)' != 'Windows_NT'">"https://drive.google.com/uc?export=download&amp;id=0BwTQrVjXe5wbQUhfcEFSbnktUzQ"</NuGetUrl>
	</PropertyGroup>

	<Target Name="CheckPrerequisites">
		<!-- Raise an error if we're unable to locate nuget.exe  -->
		<Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')"
			Text="Unable to locate '$(NuGetExePath)'" />
		<!--
		Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
		This effectively acts as a lock that makes sure that the download operation will only happen once and all
		parallel builds will have to wait for it to complete.
		-->
		<MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)"
			Properties="Configuration=NOT_IMPORTANT;DownloadNuGetExe=$(DownloadNuGetExe)" />
	</Target>

	<Target Name="_DownloadNuGet" Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')">
		<DownloadNuGet OutputFilename="$(NuGetExePath)"
			Condition="'$(OS)' == 'Windows_NT'" />
		<Exec Command="wget -O NuGet.exe $(NuGetUrl) || curl -o NuGet.exe -L $(NuGetUrl)"
			WorkingDirectory="$(NuGetToolsPath)"
			Condition="'$(OS)' != 'Windows_NT'" />
	</Target>

	<Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites;RestorePlatformDependentPackages">
		<Exec Command='$(NuGetCommand) restore -source "$(PackageSources)" "$(SolutionPath)"'
			Condition="Exists('$(SolutionPath)')"/>
		<Exec Command='$(NuGetCommand) restore -source "$(PackageSources)" -SolutionDirectory "$(SolutionDir)" "%(PackageConfigs.FullPath)"'
			Condition="!Exists('$(SolutionPath)')"/>
	</Target>

	<UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
		Condition=" '$(OS)' == 'Windows_NT' ">
		<ParameterGroup>
			<OutputFilename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Net" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				try {
					OutputFilename = Path.GetFullPath(OutputFilename);

					Log.LogMessage("Downloading latest version of NuGet.exe...");
					WebClient webClient = new WebClient();
					webClient.DownloadFile("https://nuget.org/NuGet.exe", OutputFilename);

					return true;
				}
				catch (Exception ex) {
					Log.LogErrorFromException(ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
